/* import shared library */
@Library('jenkins-shared-library')_

pipeline {
    agent none
    stages {
        stage('Check bash syntax') {
            agent { docker { image 'koalaman/shellcheck-alpine:stable' } }
            steps {
                script { bashCheck }
            }
        }
        stage('Check yaml syntax') {
            agent { docker { image 'sdesbure/yamllint' } }
            steps {
                sh 'yamllint --version'
                sh 'yamllint \${WORKSPACE}/ansible'
            }
        }
        stage('Check markdown syntax') {
            agent { docker { image 'ruby:alpine' } }
            steps {
                sh 'apk --no-cache add git'
                sh 'gem install mdl -v 0.9.0'
                sh 'mdl --version'
                sh 'mdl --style all --warnings --git-recurse \${WORKSPACE}'
            }
        }
        stage('Prepare ansible environment') {
            agent any
            environment {
                VAULTKEY = credentials('vaultkey')
                DEVOPSKEY = credentials('devopskey')
            }
            steps {
                sh 'echo \$VAULTKEY > ansible/vault.key'
                sh 'cp \$DEVOPSKEY ansible/id_rsa'
                sh 'chmod 600 ansible/id_rsa'
            }
        }
        stage('instalation role requirement ansible') {
             agent { docker { image 'registry.gitlab.com/robconnolly/docker-ansible:latest' } }
             stages {
               stage("Install ansible role dependencies") {
                   steps {
                       sh 'ansible-galaxy install -r ansible/roles/requirements.yml'
                   }
               }
               stage("Ping targeted hosts") {
                   steps {
                       sh 'ansible all -m ping -i ansible/hosts --private-key ansible/id_rsa'
                   }
               }
               stage("Verify ansible playbook syntax") {
                   steps {
                       sh 'ansible-lint -x 306 ansible/install-bulletin-board.yml'
                       sh 'echo "${GIT_BRANCH}"'
                   }
               }

              
               stage("Build docker images on build host") {
                   when {
                      expression { GIT_BRANCH == 'origin/dev' }
                   }
                   steps {
                       sh 'ansible-playbook  -i ansible/hosts --vault-password-file ansible/vault.key --private-key ansible/id_rsa --tags "build" --limit build ansible/install-bulletin-board.yml'
                   }
               }

               stage("Scan docker images on build host") {
                   when {
                      expression { GIT_BRANCH == 'origin/dev' }
                  }
                   steps {
                       sh 'ansible-playbook  -i ansible/hosts --vault-password-file ansible/vault.key --private-key ansible/id_rsa ansible/clair-scan.yml'
                   }
               }
               stage("Push docker images from build host") {
                   when {
                      expression { GIT_BRANCH == 'origin/dev' }
                  }
                   steps {
                       sh 'ansible-playbook  -i ansible/hosts --vault-password-file ansible/vault.key --private-key ansible/id_rsa --tags "push" --limit build ansible/install-bulletin-board.yml'
                   }
               }

               stage("Deploy application in preproduction") {
                  when {
                      expression { GIT_BRANCH == 'origin/dev' }
                  }
                   steps {
                       sh 'ansible-playbook  -i ansible/hosts --vault-password-file ansible/vault.key --private-key ansible/id_rsa --tags "preprod" --limit preprod ansible/install-bulletin-board.yml'
                   }
               }

               stage("Ensure application is deployed in preproduction") {
                  when {
                      expression { GIT_BRANCH == 'origin/dev' }
                  }
                  steps {
                      sh 'ansible-playbook  -i ansible/hosts --vault-password-file ansible/vault.key --tags "preprod" ansible/check_deploy_app.yml'
                  }
                } 
             }
          }
          stage('Find xss vulnerability preprod') {
              agent { docker { 
                    image 'gauntlt/gauntlt' 
                    args '--entrypoint='
                    } }
              when {
                      expression { GIT_BRANCH == 'origin/dev' }
                  }
              steps {
                  sh 'gauntlt --version'
                  sh 'gauntlt xss.attack'
              }
          }
          stage('Find nmap vulnerability preprod') {
              agent { docker { 
                    image 'gauntlt/gauntlt' 
                    args '--entrypoint='
                    } }
              when {
                      expression { GIT_BRANCH == 'origin/dev' }
                  }
              steps {
                  sh 'gauntlt --version'
                  sh 'gauntlt nmap.attack'
              }
          }
        
        stage('instalation requirement ansible') {
            agent { docker { image 'registry.gitlab.com/robconnolly/docker-ansible:latest' } }
            stages {
               stage("Install ansible role dependencies") {
                  
                   when {
                      expression { GIT_BRANCH == 'origin/master' }
                   }
                   steps {
                       sh 'ansible-galaxy install -r ansible/roles/requirements.yml'
                   }
               }
               stage("Ping targeted hosts") {
                   when {
                      expression { GIT_BRANCH == 'origin/master' }
                   }
                   steps {
                       sh 'ansible all -m ping -i ansible/hosts --private-key ansible/id_rsa'
                   }
               }
               stage("Verify ansible playbook syntax") {
                   when {
                      expression { GIT_BRANCH == 'origin/master' }
                   }
                   steps {
                       sh 'ansible-lint -x 306 ansible/install-bulletin-board.yml'
                       sh 'echo "${GIT_BRANCH}"'
                   }
               }
               stage("Deploy application in production") {
                   when {
                      expression { GIT_BRANCH == 'origin/master' }
                  }
                   steps {
                       sh 'ansible-playbook  -i ansible/hosts --vault-password-file ansible/vault.key --private-key ansible/id_rsa --tags "prod" --limit prod ansible/install-bulletin-board.yml'
                   }
               }
               stage("Ensure application is deployed in production") {
                  when {
                      expression { GIT_BRANCH == 'origin/master' }
                  }
                  steps {
                      sh 'ansible-playbook  -i ansible/hosts --vault-password-file ansible/vault.key --tags "prod" ansible/check_deploy_app.yml'
                  }
               }
            }
         }
         stage('Find xss vulnerability prod') {
             agent { docker { 
                   image 'gauntlt/gauntlt' 
                   args '--entrypoint='
                   } }
             when {
                      expression { GIT_BRANCH == 'origin/master' }
                  }
             steps {
                 sh 'gauntlt --version'
                 sh 'gauntlt xss.attack'
             }
         }
          stage('Find nmap vulnerability prod') {
              agent { docker { 
                    image 'gauntlt/gauntlt' 
                    args '--entrypoint='
                    } }
              when {
                      expression { GIT_BRANCH == 'origin/master' }
                  }
              steps {
                  sh 'gauntlt --version'
                  sh 'gauntlt nmap.attack'
              }
          }
     }

      post {
        always {
          script {
         
            /* Use slackNotifier.groovy from shared library and provide current build result as parameter */
            clean
            slackNotifier currentBuild.result
          }
        }
      }
}
